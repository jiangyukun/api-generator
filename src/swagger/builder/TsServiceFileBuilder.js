let generateService = require('../common/generateService')
let util = require('../util')

class NodeServiceFileBuilder {
    constructor(apiUrls, paths, definitions, interfacePath) {
        this.apiUrls = apiUrls
        this.paths = paths
        this.definitions = definitions
        this.interfacePath = interfacePath
        this.exportFunctionList = []
    }

    buildHeader() {
        let typeNameList = []
        for (let url of this.apiUrls) {
            let urlParts = url.split('/')
            let functionName = util.firstLetterLowerCase(urlParts[urlParts.length - 1])
            this.exportFunctionList.push(functionName)
            let apiItem = this.paths[url]
            let httpTypes = Object.getOwnPropertyNames(apiItem)
            for (let httpType of httpTypes) {
                let apiInfo = apiItem[httpType]
                if (apiInfo.deprecated === true) {
                    continue
                }
                let parameters = apiInfo.parameters
                if (parameters && parameters.length === 1 && parameters[0].in === 'body') {
                    let param = parameters[0]

                    let requestClassName = util.getResponseClassName(param.schema, this.definitions)
                    let shortNameList = requestClassName.split('.')
                    let shortName = shortNameList[shortNameList.length - 1]
                    if (typeNameList.indexOf(shortName) === -1) {
                        typeNameList.push(shortName)
                    }
                }
                let responses = apiInfo.responses
                let responseClassName = ''
                if (responses['200']) {
                    responseClassName = util.getResponseClassName(responses['200'].schema, this.definitions)
                    if (responseClassName === 'int' || responseClassName === 'integer' || responseClassName === 'string' || responseClassName === 'boolean') {
                        continue
                    }
                    if (!this.definitions[responseClassName]) {
                        console.log(`${responseClassName}`)
                        continue
                    }
                    let shortNameList = responseClassName.split('.')
                    let shortName = shortNameList[shortNameList.length - 1]
                    if (typeNameList.indexOf(shortName) === -1) {
                        typeNameList.push(shortName)
                    }
                }
            }
        }
        return `
/*
 * generated by api-generator, do not modify.
 */

import {_get, _post, _put, _delete} from '../core/http'
import {${typeNameList.join(',\r\n')}
} from '${this.interfacePath}'
        `
    }

    buildBody() {
        let body = ''
        for (let url of this.apiUrls) {
            let urlParts = url.split('/')
            let functionName = util.firstLetterLowerCase(urlParts[urlParts.length - 1])
            this.exportFunctionList.push(functionName)
            let apiItem = this.paths[url]
            let httpTypes = Object.getOwnPropertyNames(apiItem)
            for (let httpType of httpTypes) {
                if (apiItem[httpType].deprecated === true) {
                    continue
                }
                body += generateService(url, httpType, apiItem[httpType], this.definitions, httpTypes.length > 1)
            }
        }
        return body
    }

    buildFooter() {
        // return `module.exports = {\n    ${this.exportFunctionList.join(',\n    ')}\n}`
        return ''
    }
}

module.exports = NodeServiceFileBuilder
